SIZE EQU 49
.MODEL SMALL 
.STACK
.DATA
FIELD       DB 'C', 'D', 'A', 'F', 'K', 'K', 'J', 'B', 'A', 'B','D', 'H', 'G', 'R', 'O','O', 'P', 'U', 'Y', 'R', 'E','W', 'W', 'W', 'W', 'F', 'R', 'Y', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'D', 'A', 'E','H', 'T', 'U', 'I', 'R', 'E', 'R', 'T', 'S', 'W', 'A'
POSITION    DB  4   DUP(?) 
DIAG        DB  4   DUP(?)
.CODE
.STARTUP
                    ;INITIALE TO ZERO ALL NEDDED REGISTER
XOR SI,SI
XOR AX,AX
XOR DI,DI
XOR BX,BX
XOR CX,CX 
XOR DX,DX  

MOV CL,SIZE             ;PUT 49 TO CL FOR COUNTING THE LOOP
                    
L1:
MOV DL,FIELD[SI]        ;LOAD FIRST ELEMENT OF FIELD
CMP DL,'A'              ;CHECK THAT IS EQUAL TO 'A' OR NOT
JE  FIND_A   
JMP CHECK_LOOP          ;IF DID NOT FIND REPEAT THE LOOP
FIND_A:         
MOV AX,SI
MOV POSITION[DI], AL    ;COPY THE INDEX OF ELEMENT THAT MATCH TO POSITION ARRAY
MOV BL,8                ; WE DIVIDE THIS INDEX ON 8 AND IF THE RESIDVAL WAS ZERO SO IT IT ONE MAIN DIAGNOAL
MOV AX,SI
DIV BL
CMP AH,0                ;CHECK IF RES IS ZERO OR NOT
JNE NOT_DIAGNOAL
MOV DIAG[DI],1          ;IF WAS WE 1 DIAG ARRAY ELEMENT
INC DI                  ;THEN INCREMENT POINTER OF DIAG AND POSITION
JMP CHECK_LOOP
NOT_DIAGNOAL:
MOV DIAG[DI],0          ;IF WAS NOT WE 0 DIAG ARRAY ELEMENT
INC DI                  ;THEN INCREMENT POINTER OF DIAG AND POSITION
CHECK_LOOP:
INC SI                  ;INC POINTER OF FIELD POS
DEC CL                  ;DEC LOOP REPEAT
CMP CL,0                ;JMP TO L1
JNZ L1
.EXIT
END
;IN MY ALGORITHM I SCANNED ALL POSITION ARRAY FOR THE 'A' AND IF FIND 'A' I DIVIDE THE INDXE OF THAT TO 8 AND IF RES WAS ZERO SO IT IS ONE MAIN DIAGNOAL